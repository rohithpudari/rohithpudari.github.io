---
---
@INPROCEEDINGS{pudari2023dosa,
      bibtex_show={true},
      abbr={ICSME},
      preview={../DOSA/DOSA.png},
      slides={ICSME_2023_slides.pdf},
      author={Pudari, Rohith and Zhou, Shiyuan and Ahmed, Iftekhar and Dai, Zhuyun and Zhou, Shurui},
      booktitle={2023 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
      title={Aligning Documentation and Q&A Forum through Constrained Decoding with Weak Supervision}, 
      year={2023},
      volume={},
      number={},
      pages={346-351},
      abstract={Stack Overflow (SO) is a widely used question-and-answer (Q&A) forum dedicated to software development. It plays a supplementary role to official documentation (DOC for short) by offering practical examples and resolving uncertainties. However, the process of simultaneously consulting both the documentation and SO posts can be challenging and time-consuming due to their disconnected nature. In this study, we propose DOSA, a novel approach to automatically align SO and DOC, which inject domain-specific knowledge about the DOC structure into large language models (LLMs) through weak supervision and constrained decoding, thereby enhancing knowledge retrieval and streamlining task completion during the software development procedure. Our preliminary experiments find that DOSA outperforms various widely-used baselines, showing the promise of using generative retrieval models to perform low-resource software engineering tasks.},
      keywords={},
      doi={10.1109/ICSME58846.2023.00043},
      ISSN={2576-3148},
      month={Oct},
      selected={true},
      altmetric={true},
      dimensions={true},
      pdf={ICSME2023_NIER_StackOverflow.pdf},
      html={https://ieeexplore.ieee.org/document/10336308},
      blog={../blog/2023/dosa/}
}

@misc{pudari2023copilot,
      bibtex_show={true},
      abbr={ARXIV},
      preview={../copilot/copilot.png},
      slides={Master_Thesis.pdf},
      title={From Copilot to Pilot: Towards AI Supported Software Development}, 
      author={Rohith Pudari and Neil A. Ernst},
      year={2023},
      eprint={2303.04142},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      selected={true},
      doi={10.48550/arxiv.2303.04142},
      altmetric={true},
      dimensions={true},
      arxiv={2303.04142},
      abstract={AI-supported programming has arrived, as shown by the introduction and successes of large language models for code, such as Copilot/Codex (Github/OpenAI) and AlphaCode (DeepMind). 
      Above human average performance on programming challenges is now possible. However, software engineering is much more than solving programming contests. Moving beyond code completion to 
      AI-supported software engineering will require an AI system that can, among other things, understand how to avoid code smells, to follow language idioms, and eventually (maybe!) propose rational 
      software designs. In this study, we explore the current limitations of AI-supported code completion tools like Copilot and offer a simple taxonomy for understanding the classification of AI-supported 
      code completion tools in this space. We first perform an exploratory study on Copilot's code suggestions for language idioms and code smells. Copilot does not follow language idioms and avoid code smells 
      in most of our test scenarios. We then conduct additional investigation to determine the current boundaries of AI-supported code completion tools like Copilot by introducing a taxonomy of software 
      abstraction hierarchies where 'basic programming functionality' such as code compilation and syntax checking is at the least abstract level, software architecture analysis and design are at the most 
      abstract level. We conclude by providing a discussion on challenges for future development of AI-supported code completion tools to reach the design level of abstraction in our taxonomy.}
}